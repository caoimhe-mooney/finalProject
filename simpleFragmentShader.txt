#version 330

in vec2 Texcoord;
in vec3 position_eye, normal_eye;
uniform mat4 view_matrix;


uniform sampler2D map;
uniform sampler2D stone;
uniform sampler2D wood;
uniform sampler2D carpet;
uniform sampler2D paint;

uniform int texture_num;
uniform float light_pos_z;

//light properties
vec3 light_position_world = vec3 (0.0, 70.0, light_pos_z);
vec3 Ls = vec3 (1.0, 1.0, 1.0); //specular coefficient
vec3 Ld = vec3 (0.7, 0.7, 0.7); //diffuse coefficient
vec3 La = vec3 (0.3, 0.3, 0.3); //ambient coefficient

// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // specular reflectance
vec3 Kd = vec3 (1.0, 1.0, 1.0); // diffuse reflectance
vec3 Ka = vec3 (1.0, 1.0, 1.0); // ambient reflectance  
float specular_exponent = 10.0; 
out vec4 colour; 

in vec3 LightIntensity;
void main(){
		
	
	vec3 Ia = La * Ka; //ambient lighting term

	// diffuse
	vec3 light_position_eye = vec3 (view_matrix * vec4(light_position_world, 1.0));
	vec3 distance_to_light_eye = light_position_eye - position_eye;
	vec3 direction_to_light_eye = normalize (distance_to_light_eye);
	float dot_prod = dot (direction_to_light_eye, normal_eye);
	dot_prod = max (dot_prod, 0.0);
	vec3 Id = Ld * Kd * dot_prod;

	// specular
	vec3 reflection_eye = reflect (-direction_to_light_eye, normal_eye);
	vec3 surface_to_viewer_eye = normalize (-position_eye);
	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
	dot_prod_specular = max (dot_prod_specular, 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);
	vec3 Is = Ls * Ks * specular_factor;

	vec4 tex;
	if(texture_num == 0){
	tex = texture(map, Texcoord);
	}
	if(texture_num == 1){
	tex = texture(stone, Texcoord);
	}
	else if(texture_num == 2){
	tex = texture(wood, Texcoord);
	}
	else if(texture_num == 3){
	tex = texture(carpet, Texcoord);
	}
	else if(texture_num == 4){
	tex = texture(paint, Texcoord);
	}
	colour = vec4(Is+Id+Ia, 1.0) * tex; //phong illumination (specular*ambient*diffuse) * texture
}